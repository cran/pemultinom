// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// vec_prod
double vec_prod(const NumericVector& x, const NumericVector& y);
RcppExport SEXP _pemultinom_vec_prod(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(vec_prod(x, y));
    return rcpp_result_gen;
END_RCPP
}
// vec_diff
NumericVector vec_diff(const NumericVector& x, const NumericVector& y);
RcppExport SEXP _pemultinom_vec_diff(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(vec_diff(x, y));
    return rcpp_result_gen;
END_RCPP
}
// mx_vec_prod_i
double mx_vec_prod_i(NumericMatrix x, NumericVector y, int i);
RcppExport SEXP _pemultinom_mx_vec_prod_i(SEXP xSEXP, SEXP ySEXP, SEXP iSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    rcpp_result_gen = Rcpp::wrap(mx_vec_prod_i(x, y, i));
    return rcpp_result_gen;
END_RCPP
}
// mx_prod
NumericMatrix mx_prod(NumericMatrix x, NumericMatrix y);
RcppExport SEXP _pemultinom_mx_prod(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(mx_prod(x, y));
    return rcpp_result_gen;
END_RCPP
}
// xb_mx_plus
NumericMatrix xb_mx_plus(NumericMatrix xb, NumericVector beta0);
RcppExport SEXP _pemultinom_xb_mx_plus(SEXP xbSEXP, SEXP beta0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type xb(xbSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type beta0(beta0SEXP);
    rcpp_result_gen = Rcpp::wrap(xb_mx_plus(xb, beta0));
    return rcpp_result_gen;
END_RCPP
}
// vec_sum
double vec_sum(const NumericVector& x);
RcppExport SEXP _pemultinom_vec_sum(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(vec_sum(x));
    return rcpp_result_gen;
END_RCPP
}
// max2
double max2(double a, double b);
RcppExport SEXP _pemultinom_max2(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(max2(a, b));
    return rcpp_result_gen;
END_RCPP
}
// vec_max
double vec_max(NumericVector x);
RcppExport SEXP _pemultinom_vec_max(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(vec_max(x));
    return rcpp_result_gen;
END_RCPP
}
// vec_devide_number
NumericVector vec_devide_number(NumericVector x, double y);
RcppExport SEXP _pemultinom_vec_devide_number(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(vec_devide_number(x, y));
    return rcpp_result_gen;
END_RCPP
}
// vec_multiply_number
NumericVector vec_multiply_number(NumericVector x, double y);
RcppExport SEXP _pemultinom_vec_multiply_number(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(vec_multiply_number(x, y));
    return rcpp_result_gen;
END_RCPP
}
// vec_square
NumericVector vec_square(NumericVector x);
RcppExport SEXP _pemultinom_vec_square(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(vec_square(x));
    return rcpp_result_gen;
END_RCPP
}
// vec_pointwise_prod
NumericVector vec_pointwise_prod(NumericVector x, NumericVector y);
RcppExport SEXP _pemultinom_vec_pointwise_prod(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(vec_pointwise_prod(x, y));
    return rcpp_result_gen;
END_RCPP
}
// pr
NumericMatrix pr(const NumericMatrix& xb);
RcppExport SEXP _pemultinom_pr(SEXP xbSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type xb(xbSEXP);
    rcpp_result_gen = Rcpp::wrap(pr(xb));
    return rcpp_result_gen;
END_RCPP
}
// xb_calc
NumericMatrix xb_calc(NumericMatrix x, NumericMatrix beta, NumericVector beta0);
RcppExport SEXP _pemultinom_xb_calc(SEXP xSEXP, SEXP betaSEXP, SEXP beta0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type beta0(beta0SEXP);
    rcpp_result_gen = Rcpp::wrap(xb_calc(x, beta, beta0));
    return rcpp_result_gen;
END_RCPP
}
// abs_value
double abs_value(double x);
RcppExport SEXP _pemultinom_abs_value(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(abs_value(x));
    return rcpp_result_gen;
END_RCPP
}
// vec_max_norm
double vec_max_norm(const NumericVector& x);
RcppExport SEXP _pemultinom_vec_max_norm(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(vec_max_norm(x));
    return rcpp_result_gen;
END_RCPP
}
// test
NumericMatrix test(NumericMatrix x);
RcppExport SEXP _pemultinom_test(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(test(x));
    return rcpp_result_gen;
END_RCPP
}
// soft_thresholding
double soft_thresholding(double z, double lambda);
RcppExport SEXP _pemultinom_soft_thresholding(SEXP zSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type z(zSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(soft_thresholding(z, lambda));
    return rcpp_result_gen;
END_RCPP
}
// pemultinom_c
List pemultinom_c(NumericMatrix x, NumericMatrix y, NumericVector lambda_list, int max_iter, double tol);
RcppExport SEXP _pemultinom_pemultinom_c(SEXP xSEXP, SEXP ySEXP, SEXP lambda_listSEXP, SEXP max_iterSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lambda_list(lambda_listSEXP);
    Rcpp::traits::input_parameter< int >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(pemultinom_c(x, y, lambda_list, max_iter, tol));
    return rcpp_result_gen;
END_RCPP
}
// penalized_quad
NumericMatrix penalized_quad(NumericMatrix A, NumericVector b, NumericVector lambda_list, int max_iter, double tol);
RcppExport SEXP _pemultinom_penalized_quad(SEXP ASEXP, SEXP bSEXP, SEXP lambda_listSEXP, SEXP max_iterSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type A(ASEXP);
    Rcpp::traits::input_parameter< NumericVector >::type b(bSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lambda_list(lambda_listSEXP);
    Rcpp::traits::input_parameter< int >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(penalized_quad(A, b, lambda_list, max_iter, tol));
    return rcpp_result_gen;
END_RCPP
}
// pemultinom_c_reverse
List pemultinom_c_reverse(NumericMatrix x, NumericMatrix y, NumericVector lambda_list, int max_iter, double tol, NumericVector zero_ind, NumericVector weights, bool intercept);
RcppExport SEXP _pemultinom_pemultinom_c_reverse(SEXP xSEXP, SEXP ySEXP, SEXP lambda_listSEXP, SEXP max_iterSEXP, SEXP tolSEXP, SEXP zero_indSEXP, SEXP weightsSEXP, SEXP interceptSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lambda_list(lambda_listSEXP);
    Rcpp::traits::input_parameter< int >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type zero_ind(zero_indSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< bool >::type intercept(interceptSEXP);
    rcpp_result_gen = Rcpp::wrap(pemultinom_c_reverse(x, y, lambda_list, max_iter, tol, zero_ind, weights, intercept));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_pemultinom_vec_prod", (DL_FUNC) &_pemultinom_vec_prod, 2},
    {"_pemultinom_vec_diff", (DL_FUNC) &_pemultinom_vec_diff, 2},
    {"_pemultinom_mx_vec_prod_i", (DL_FUNC) &_pemultinom_mx_vec_prod_i, 3},
    {"_pemultinom_mx_prod", (DL_FUNC) &_pemultinom_mx_prod, 2},
    {"_pemultinom_xb_mx_plus", (DL_FUNC) &_pemultinom_xb_mx_plus, 2},
    {"_pemultinom_vec_sum", (DL_FUNC) &_pemultinom_vec_sum, 1},
    {"_pemultinom_max2", (DL_FUNC) &_pemultinom_max2, 2},
    {"_pemultinom_vec_max", (DL_FUNC) &_pemultinom_vec_max, 1},
    {"_pemultinom_vec_devide_number", (DL_FUNC) &_pemultinom_vec_devide_number, 2},
    {"_pemultinom_vec_multiply_number", (DL_FUNC) &_pemultinom_vec_multiply_number, 2},
    {"_pemultinom_vec_square", (DL_FUNC) &_pemultinom_vec_square, 1},
    {"_pemultinom_vec_pointwise_prod", (DL_FUNC) &_pemultinom_vec_pointwise_prod, 2},
    {"_pemultinom_pr", (DL_FUNC) &_pemultinom_pr, 1},
    {"_pemultinom_xb_calc", (DL_FUNC) &_pemultinom_xb_calc, 3},
    {"_pemultinom_abs_value", (DL_FUNC) &_pemultinom_abs_value, 1},
    {"_pemultinom_vec_max_norm", (DL_FUNC) &_pemultinom_vec_max_norm, 1},
    {"_pemultinom_test", (DL_FUNC) &_pemultinom_test, 1},
    {"_pemultinom_soft_thresholding", (DL_FUNC) &_pemultinom_soft_thresholding, 2},
    {"_pemultinom_pemultinom_c", (DL_FUNC) &_pemultinom_pemultinom_c, 5},
    {"_pemultinom_penalized_quad", (DL_FUNC) &_pemultinom_penalized_quad, 5},
    {"_pemultinom_pemultinom_c_reverse", (DL_FUNC) &_pemultinom_pemultinom_c_reverse, 8},
    {NULL, NULL, 0}
};

RcppExport void R_init_pemultinom(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
